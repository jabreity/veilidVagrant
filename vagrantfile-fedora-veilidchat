# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.
 
  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
 
  config.vm.define :fedoraVeilidChat do |fedoraVeilidChat|
    fedoraVeilidChat.vm.box = "generic/fedora38"
    fedoraVeilidChat.vm.provider :libvirt do |libvirt|
      libvirt.id_ssh_key_file = "/home/jason/projects/kali_remote/id_ssh.key"
      #libvirt.uri = "qemu+ssh://10.130.10.50/system"
      libvirt.host = '10.130.10.50'
      libvirt.connect_via_ssh = true
      libvirt.username = "jason"
      libvirt.password = ''
      libvirt.memory = 4096
      libvirt.boot 'hd'
      # set some BIOS settings that will help us identify this particular machine.
      #
      #   QEMU                | Linux
      #   --------------------+----------------------------------------------
      #   type=1,manufacturer | /sys/devices/virtual/dmi/id/sys_vendor
      #   type=1,product      | /sys/devices/virtual/dmi/id/product_name
      #   type=1,version      | /sys/devices/virtual/dmi/id/product_version
      #   type=1,serial       | /sys/devices/virtual/dmi/id/product_serial
      #   type=1,sku          | dmidecode
      #   type=1,uuid         | /sys/devices/virtual/dmi/id/product_uuid
      #   type=3,manufacturer | /sys/devices/virtual/dmi/id/chassis_vendor
      #   type=3,family       | /sys/devices/virtual/dmi/id/chassis_type
      #   type=3,version      | /sys/devices/virtual/dmi/id/chassis_version
      #   type=3,serial       | /sys/devices/virtual/dmi/id/chassis_serial
      #   type=3,asset        | /sys/devices/virtual/dmi/id/chassis_asset_tag
      [
        'type=1,manufacturer=your vendor name here',
        'type=1,product=your product name here',
        'type=1,version=your product version here',
        'type=1,serial=your product serial number here',
        'type=1,sku=your product SKU here',
        'type=1,uuid=00000000-0000-4000-8000-000000000003',
        'type=3,manufacturer=your chassis vendor name here',
        #'type=3,family=1', # TODO why this does not work on qemu from ubuntu 18.04?
        'type=3,version=your chassis version here',
        'type=3,serial=your chassis serial number here',
        'type=3,asset=your chassis asset tag here',
        'type=11,value=io.systemd.credential.binary:mycred=c2VjcmV0'
      ].each do |value|
        libvirt.qemuargs :value => '-smbios'
        libvirt.qemuargs :value => value
      end
      # set some BIOS settings that will help us identify this particular machine.
      #
      #   QEMU                | Linux
      #   --------------------+----------------------------------------------
      #   type=1,manufacturer | /sys/devices/virtual/dmi/id/sys_vendor
      #   type=1,product      | /sys/devices/virtual/dmi/id/product_name
      #   type=1,version      | /sys/devices/virtual/dmi/id/product_version
      #   type=1,serial       | /sys/devices/virtual/dmi/id/product_serial
      #   type=1,sku          | dmidecode
      #   type=1,uuid         | /sys/devices/virtual/dmi/id/product_uuid
      #   type=3,manufacturer | /sys/devices/virtual/dmi/id/chassis_vendor
      #   type=3,family       | /sys/devices/virtual/dmi/id/chassis_type
      #   type=3,version      | /sys/devices/virtual/dmi/id/chassis_version
      #   type=3,serial       | /sys/devices/virtual/dmi/id/chassis_serial
      #   type=3,asset        | /sys/devices/virtual/dmi/id/chassis_asset_tag
      #   type=11,value=io.systemd.credential.binary:mycred:c2VjcmV0
      # Inside of the system invoked that way the credential may then be viewed:
      # systemd-creds --system cat mycred
      # Or propagated to services further down:
      # systemd-run -p ImportCredential=mycred -P --wait systemd-creds cat mycred
      
      libvirt.cpus = 2
      #libvirt.nested = true
      #libvirt.graphics_port = 5901
      #libvirt.graphics_ip = '0.0.0.0'
      #libvirt.video_type = 'qxl', 'jabreity'
      # Required for virtiofs jasonabreitwieser
      # libvirt.memorybacking :access, :mode => "shared"
    end
  end
 
  # Default false
  config.ssh.forward_agent = true
  config.ssh.forward_x11 = true
 
  # Default true
  config.ssh.keep_alive = false
 
  # Default 300s
  config.vm.boot_timeout = 900

  config.vm.provision "file", source: "~/projects/gm-com-chain.pem", destination: "~/"

  
  config.vm.provision "shell", inline: <<-SHELL
    echo foo
    sudo cp /home/vagrant/gm-com-chain.pem /etc/pki/ca-trust/source/anchors/
    #sudo mv ~/gdroot-g2.pem /etc/pki/fwupd/
    #sudo update-ca-trust
    # Base requirements for installing X11
    #sudo dnf update -y
    #sudo dnf install -y git
    # Add desktop environment
    sudo dnf install -y xorg-x11-xauth
    sudo dnf install -y xclock
    sudo dnf install -y gnome-shell
    #sudo dnf install xorg-x11-apps
    sudo dnf install -y xorg*
    sudo dnf install -y @xfce-desktop-environment
    #sudo dnf install -y vscode
    sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
    sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'
    sudo dnf check-update
    sudo dnf install -y code
    sudo dnf install -y firefox

    sudo dnf install -y redhat-lsb
    sudo dnf install -y ninja-build
    sudo dnf install -y clang
    sudo dnf install -y gtk+
    sudo dnf install -y gtk3-devel
    sudo dnf install -y PackageKit-gtk3-module

    sudo sed -i '/#X11Forwarding no/s//X11Forwarding yes/' /etc/ssh/sshd_config
    sudo rm -rf /root/.Xauthority
    sudo rm -rf /root/.serverauth.*  
  SHELL
  
  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    echo bar
    wget -q https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_3.22.2-stable.tar.xz
    tar --index-file=/dev/null -xf flutter_linux_3.22.2-stable.tar.xz
  SHELL

  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    echo bas
    sudo pkg install -y git
    git clone https://gitlab.com/veilid/veilid.git
    git clone https://gitlab.com/veilid/veilidchat.git
    sudo mkdir /usr/local/veilidchat
    sudo chown vagrant:vagrant /usr/local/veilidchat/
    sudo chmod 744 /usr/local/veilidchat/
  SHELL
  
  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    echo fooby
    echo export PATH="$HOME/.pub-cache/bin:$HOME/flutter/bin:$HOME/.cargo/bin:/usr/local/veilidchat:$HOME/veilid/target/release:$PATH" >> ~/.bashrc
    #echo export PATH="$HOME/flutter/bin:$PATH" >> ~/.bashrc
    #echo export PATH="$HOME/.cargo/bin:$PATH" >> ~/.bashrc
    #echo export PATH="/usr/local/veilidchat:$PATH" >> ~/.bashrc
  SHELL
  
  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    echo barby
    sudo -u vagrant sed -i 's/debian\|/Fedora\|/' /home/vagrant/veilid/dev-setup/setup_linux.sh
    echo "N" | ./veilid/dev-setup/setup_linux.sh || true
    sudo ./veilid/dev-setup/install_linux_prerequisites.sh
    sudo dnf install cargo -y
    #sudo dnf install rustc -y
    #sudo dnf install rust -y
    #sudo apt-get install python3-pip -y
    #sudo -u vagrant curl https://sh.rustup.rs -sSf | sh -s -- -y
  SHELL

  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    echo basby
    export PATH="$HOME/flutter/bin:$PATH"
    sudo -u vagrant sed -i 's/debian\|/Fedora\|/' /home/vagrant/veilidchat/dev-setup/setup_linux.sh
    echo "N" | ./veilidchat/dev-setup/setup_linux.sh || true
    ./veilidchat/install_protoc_linux.sh
    cd ~/veilidchat/
    dart pub global activate protoc_plugin
    flutter precache
    flutter --disable-analytics
    #cd ~/veilid/
    #cargo build --release -p veilid-server
    #cargo build --release -p veilid-cli

  SHELL

  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    echo foobyfoo
    echo Login to host with "vagrant ssh"
    #echo Issue the following command if flutter errors:
    #echo export PATH="$HOME/flutter/bin:$PATH"
    cd veilidchat
    ./build
    flutter build linux
    echo cd veilidchat
    echo ./reset_run.sh
    echo  -or-
    echo cd veilidchat
    echo "nohup firefox & ./reset_run.sh | grep http && fg"
    flutter build apk
    #cd ~/veilid/target/release 
    #nohup ./veilid-server &> /dev/null 2>&1 & disown
    
  SHELL

  config.vm.synced_folder ".", "/vagrant", type: "rsync",
    rsync__exclude: ".git/, ./vagrant"
  end
